// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	entities "github.com/gustavooferreira/news-app-articles-mgmt-service/pkg/core/entities"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddArticle provides a mock function with given fields: article
func (_m *Repository) AddArticle(article entities.Article) error {
	ret := _m.Called(article)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Article) error); ok {
		r0 = rf(article)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetArticles provides a mock function with given fields: provider, category, sorting, limit, after
func (_m *Repository) GetArticles(provider string, category string, sorting string, limit int, after *time.Time) (entities.Articles, error) {
	ret := _m.Called(provider, category, sorting, limit, after)

	var r0 entities.Articles
	if rf, ok := ret.Get(0).(func(string, string, string, int, *time.Time) entities.Articles); ok {
		r0 = rf(provider, category, sorting, limit, after)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entities.Articles)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, int, *time.Time) error); ok {
		r1 = rf(provider, category, sorting, limit, after)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HealthCheck provides a mock function with given fields:
func (_m *Repository) HealthCheck() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
